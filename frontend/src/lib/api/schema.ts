/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/auth/signup": {
    /**
     * Register User
     * @description Creates a new user account with the provided credentials.
     */
    post: operations["AuthController.signup"];
  };
  "/api/auth/change-password": {
    /**
     * Change Password
     * @description Changes the authenticated user's password to the new password provided.
     */
    patch: operations["AuthController.changePassword"];
  };
  "/api/auth/verify": {
    /**
     * Verify Token
     * @description Verifies if the user's authentication token is valid and belongs to an admin user.
     */
    post: operations["AuthController.verifyToken"];
  };
  "/api/courses/": {
    /**
     * Create Course
     * @description Creates a new course with the provided details.
     */
    post: operations["CourseController.create"];
  };
  "/api/courses/{id}": {
    /**
     * Get Course
     * @description Retrieves the course details for the specified course ID.
     */
    get: operations["CourseController.read"];
    /**
     * Update Course
     * @description Updates the course details for the specified course ID.
     */
    put: operations["CourseController.update"];
  };
  "/api/courses/{id}/versions": {
    /**
     * Create Course Version
     * @description Creates a new version for a specific course.
     */
    post: operations["CourseVersionController.create"];
  };
  "/api/courses/versions/{id}": {
    /**
     * Get Course Version
     * @description Retrieves a course version by its ID.
     */
    get: operations["CourseVersionController.read"];
  };
  "/api/courses/{courseId}/versions/{versionId}": {
    /**
     * Delete Course Version
     * @description Deletes a course version by its ID.
     */
    delete: operations["CourseVersionController.delete"];
  };
  "/api/courses/versions/{versionId}/modules": {
    /**
     * Create Module
     * @description Creates a new module in the specified course version with the provided details.
     */
    post: operations["ModuleController.create"];
  };
  "/api/courses/versions/{versionId}/modules/{moduleId}": {
    /**
     * Update Module
     * @description Updates an existing module's name or description within a course version.
     */
    put: operations["ModuleController.update"];
    /**
     * Delete Module
     * @description Permanently removes a module from a course version.
     */
    delete: operations["ModuleController.delete"];
  };
  "/api/courses/versions/{versionId}/modules/{moduleId}/move": {
    /**
     * Move Module
     * @description Reorders a module within its course version by placing it before or after another module.
     */
    put: operations["ModuleController.move"];
  };
  "/api/courses/versions/{versionId}/modules/{moduleId}/sections": {
    /**
     * Create Section
     * @description Creates a new section in the specified module and automatically generates an associated items group.
     */
    post: operations["SectionController.create"];
  };
  "/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}": {
    /**
     * Update Section
     * @description Updates an existing section's name or description within a module.
     */
    put: operations["SectionController.update"];
  };
  "/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/move": {
    /**
     * Move Section
     * @description Reorders a section within its module by placing it before or after another section.
     */
    put: operations["SectionController.move"];
  };
  "/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items": {
    /**
     * Get All Items
     * @description Retrieves all items from the specified section of a module in a course version.
     */
    get: operations["ItemController.readAll"];
    /**
     * Create Item
     * @description Creates a new item in the specified section with the provided details.
     */
    post: operations["ItemController.create"];
  };
  "/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}": {
    /**
     * Update Item
     * @description Updates an existing item in the specified section with the provided details.
     */
    put: operations["ItemController.update"];
  };
  "/api/courses/itemGroups/{itemsGroupId}/items/{itemId}": {
    /**
     * Delete Item
     * @description Deletes an item from a course section permanently.
     */
    delete: operations["ItemController.delete"];
  };
  "/api/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}/move": {
    /**
     * Move Item
     * @description Moves an item to a new position within its section by recalculating its order.
     */
    put: operations["ItemController.move"];
  };
  "/api/users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}": {
    /**
     * Enroll User in Course
     * @description Enrolls a user in a specific course version and initializes their progress.
     */
    post: operations["EnrollmentController.enrollUser"];
  };
  "/api/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/": {
    /**
     * Get User Progress
     * @description Retrieves a user's progress for a specific course version.
     */
    get: operations["ProgressController.getUserProgress"];
  };
  "/api/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/start": {
    /**
     * Start Course Item
     * @description Starts tracking a user's progress on a specific course item.
     */
    post: operations["ProgressController.startItem"];
  };
  "/api/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/stop": {
    /**
     * Stop Course Item
     * @description Stops tracking a user's progress on a specific course item.
     */
    post: operations["ProgressController.stopItem"];
  };
  "/api/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/update": {
    /**
     * Update Progress
     * @description Updates a user's progress for a specific course item.
     */
    patch: operations["ProgressController.updateProgress"];
  };
  "/api/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/reset": {
    /**
     * Reset Course Progress
     * @description Resets a user's progress for a course, module, section, or item.
     */
    patch: operations["ProgressController.resetProgress"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SignUpBody: {
      /**
       * Email Address
       * Format: email
       * @description Email address of the user, used as login identifier
       * @example user@example.com
       */
      email: string;
      /**
       * Password
       * Format: password
       * @description Password for account authentication (minimum 8 characters). Must contain: <br />1. **Uppercase letters** (A–Z)  <br /> 2. **Lowercase letters** (a–z)  <br /> 3. **Numbers** (0–9)   <br />4. **Special symbols** (`! @ # $ % ^ & * ( ) – _ = + [ ] { } | ; : , . ? /`)
       * @example SecureP@ssw0rd
       */
      password: string;
      /**
       * First Name
       * @description User's first name (alphabetic characters only)
       * @example John
       */
      firstName: string;
      /**
       * Last Name
       * @description User's last name (alphabetic characters only)
       * @example Smith
       */
      lastName: string;
    };
    ChangePasswordBody: {
      /**
       * New Password
       * Format: password
       * @description New password that meets security requirements.  Must contain: <br />1. **Uppercase letters** (A–Z)  <br /> 2. **Lowercase letters** (a–z)  <br /> 3. **Numbers** (0–9)   <br />4. **Special symbols** (`! @ # $ % ^ & * ( ) – _ = + [ ] { } | ; : , . ? /`)
       * @example SecureP@ssw0rd
       */
      newPassword: string;
      /**
       * Confirm New Password
       * Format: password
       * @description Confirmation of the new password (must match exactly). Must contain: <br />1. **Uppercase letters** (A–Z)  <br /> 2. **Lowercase letters** (a–z)  <br /> 3. **Numbers** (0–9)   <br />4. **Special symbols** (`! @ # $ % ^ & * ( ) – _ = + [ ] { } | ; : , . ? /`)
       * @example SecureP@ssw0rd
       */
      newPasswordConfirm: string;
    };
    SignUpResponse: {
      /**
       * @description Unique identifier for the user
       * @example cKy6H2O04PgTh8O3DpUXjgJYUr53
       */
      uid: string;
      /**
       * Format: email
       * @description Email address of the registered user
       * @example user@example.com
       */
      email: string;
      /**
       * @description User's first name
       * @example John
       */
      firstName: string;
      /**
       * @description User's last name
       * @example Smith
       */
      lastName: string;
    };
    ChangePasswordResponse: {
      /**
       * @description Indicates the operation was successful
       * @example true
       */
      success: boolean;
      /**
       * @description Success message
       * @example Password changed successfully
       */
      message: string;
    };
    TokenVerificationResponse: {
      /**
       * @description Confirmation message for valid token
       * @example Token is valid
       */
      message: string;
    };
    AuthErrorResponse: {
      /**
       * @description The error message
       * @example Invalid credentials. Please check your email and password.
       */
      message: string;
    };
    ValidationErrorResponse: {
      /** @description The object that was validated. */
      target: Record<string, never>;
      /** @description The property that failed validation. */
      property: string;
      /** @description Constraints that failed validation with error messages. */
      constraints: Record<string, never>;
      /**
       * Format: ValidationErrorResponse
       * @description Contains all nested validation errors of the property.
       */
      children: readonly components["schemas"]["Array"][];
      /** @description Contains all nested validation errors of the property. */
      contexts?: Record<string, never>;
    };
    DefaultErrorResponse: {
      /** @description The error message. */
      message: string;
    };
    BadRequestErrorResponse: {
      /** @description The error message. */
      message: string;
      /** @description The error details. */
      errors: components["schemas"]["ValidationErrorResponse"];
    };
    CreateCourseBody: {
      /**
       * Course Name
       * @description Name of the course
       * @example Introduction to Programming
       */
      name: string;
      /**
       * Course Description
       * @description Description of the course
       * @example This course covers the basics of programming.
       */
      description: string;
    };
    UpdateCourseBody: {
      /**
       * @description Name of the course
       * @example Introduction to Programming
       */
      name?: string;
      /**
       * @description Description of the course
       * @example This course covers the basics of programming.
       */
      description?: string;
      /**
       * @deprecated
       * @description [READONLY] This is a virtual field used only for validation. Do not include this field in requests.
       * Either "name" or "description" must be provided.
       */
      nameOrDescription?: string;
    };
    ReadCourseParams: {
      /**
       * Format: Mongo Object ID
       * @description Object ID of the course to read
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      id: string;
    };
    UpdateCourseParams: {
      /**
       * Format: Mongo Object ID
       * @description Object ID of the course to update
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      id: string;
    };
    CourseDataResponse: {
      /**
       * Format: Mongo Object ID
       * @description Unique identifier for the course
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      _id: string;
      /**
       * @description Name of the course
       * @example Introduction to Programming
       */
      name: string;
      /**
       * @description Description of the course
       * @example This course covers the basics of programming.
       */
      description: string;
      /**
       * @description List of course version IDs
       * @example [
       *   "60d5ec49b3f1c8e4a8f8b8c2",
       *   "60d5ec49b3f1c8e4a8f8b8c3"
       * ]
       */
      versions: readonly string[];
      /**
       * @description List of instructor IDs associated with the course
       * @example [
       *   "60d5ec49b3f1c8e4a8f8b8c4",
       *   "60d5ec49b3f1c8e4a8f8b8c5"
       * ]
       */
      instructors: readonly string[];
      /**
       * Course Created At
       * Format: date-time
       * @description Timestamp when the course was created
       * @example 2023-10-01T12:00:00Z
       */
      createdAt: string;
      /**
       * Course Updated At
       * Format: date-time
       * @description Timestamp when the course was last updated
       * @example 2023-10-01T12:00:00Z
       */
      updatedAt: string;
    };
    CourseNotFoundErrorResponse: {
      /**
       * @description The error message.
       * @example No course found with the specified ID. Please verify the ID and try again.
       */
      message: string;
    };
    CreateCourseVersionBody: {
      /**
       * Course ID
       * Format: Mongo Object ID
       * @description ID of the course this version belongs to (auto-managed)
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      courseId?: string;
      /**
       * Version Label
       * @description The version label or identifier (e.g., v1.0, Fall 2025)
       * @example v1.0
       */
      version: string;
      /**
       * Version Description
       * @description A brief description of the course version
       * @example First release of the course
       */
      description: string;
    };
    CreateCourseVersionParams: {
      /**
       * Course ID
       * Format: Mongo Object ID
       * @description ID of the course to attach the new version to
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      id: string;
    };
    ReadCourseVersionParams: {
      /**
       * Version ID
       * Format: Mongo Object ID
       * @description ID of the course version to retrieve
       * @example 60d5ec49b3f1c8e4a8f8b8d2
       */
      id: string;
    };
    DeleteCourseVersionParams: {
      /**
       * Version ID
       * Format: Mongo Object ID
       * @description ID of the course version to delete
       * @example 60d5ec49b3f1c8e4a8f8b8d2
       */
      versionId: string;
      /**
       * Course ID
       * Format: Mongo Object ID
       * @description ID of the course to which the version belongs
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      courseId: string;
    };
    CourseVersionDataResponse: {
      /**
       * Format: Mongo Object ID
       * @description ID of the course version
       * @example 60d5ec49b3f1c8e4a8f8b8d2
       */
      id: string;
      /**
       * @description Version name/label
       * @example v1.0
       */
      name: string;
      /**
       * @description Description of the version
       * @example First release of the course
       */
      description: string;
      /**
       * Format: Mongo Object ID
       * @description ID of the course this version belongs to
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      courseId: string;
      /**
       * Format: date-time
       * @description Creation timestamp
       * @example 2023-10-01T12:00:00Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description Last update timestamp
       * @example 2023-10-01T12:00:00Z
       */
      updatedAt: string;
    };
    CourseVersionNotFoundErrorResponse: {
      /**
       * @description HTTP status code
       * @example 404
       */
      statusCode: number;
      /**
       * @description Error message
       * @example Course version not found
       */
      message: string;
      /**
       * @description Error type
       * @example Not Found
       */
      error: string;
    };
    CreateCourseVersionResponse: {
      /** @description The updated course object */
      course: components["schemas"]["Object"];
      /** @description The created version object */
      version: components["schemas"]["Object"];
    };
    CreateModuleBody: {
      /**
       * Module Name
       * @description Name/title of the module
       * @example Introduction to Data Structures
       */
      name: string;
      /**
       * Module Description
       * @description Detailed description of the module content
       * @example This module covers fundamental data structures including arrays, linked lists, stacks, and queues.
       */
      description: string;
      /**
       * After Module ID
       * Format: Mongo Object ID
       * @description Optional: Position the new module after this module ID
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      afterModuleId?: string;
      /**
       * Before Module ID
       * Format: Mongo Object ID
       * @description Optional: Position the new module before this module ID
       * @example 60d5ec49b3f1c8e4a8f8b8c4
       */
      beforeModuleId?: string;
    };
    UpdateModuleBody: {
      /**
       * Module Name
       * @description Updated name of the module
       * @example Advanced Data Structures
       */
      name?: string;
      /**
       * Module Description
       * @description Updated description of the module content
       * @example This module covers advanced data structures including trees, graphs, and hash tables.
       */
      description?: string;
      /**
       * @deprecated
       * @description [READONLY] This is a virtual field used only for validation. Do not include this field in requests.
       * Either "name" or "description" must be provided.
       */
      nameOrDescription?: string;
    };
    MoveModuleBody: {
      /**
       * After Module ID
       * Format: Mongo Object ID
       * @description Move the module after this module ID
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      afterModuleId?: string;
      /**
       * Before Module ID
       * Format: Mongo Object ID
       * @description Move the module before this module ID
       * @example 60d5ec49b3f1c8e4a8f8b8c4
       */
      beforeModuleId?: string;
      /**
       * @deprecated
       * @description [READONLY] Validation helper. Either afterModuleId or beforeModuleId must be provided.
       */
      onlyOneAllowed?: string;
      /**
       * @deprecated
       * @description [READONLY] Validation helper. Both afterModuleId and beforeModuleId should not be provided together.
       */
      bothNotAllowed?: string;
    };
    CreateModuleParams: {
      /**
       * Version ID
       * Format: Mongo Object ID
       * @description ID of the course version to which the module will be added
       * @example 60d5ec49b3f1c8e4a8f8b8d5
       */
      versionId: string;
    };
    UpdateModuleParams: {
      /**
       * Version ID
       * Format: Mongo Object ID
       * @description ID of the course version containing the module
       * @example 60d5ec49b3f1c8e4a8f8b8d5
       */
      versionId: string;
      /**
       * Module ID
       * Format: Mongo Object ID
       * @description ID of the module to be updated
       * @example 60d5ec49b3f1c8e4a8f8b8e6
       */
      moduleId: string;
    };
    MoveModuleParams: {
      /**
       * Version ID
       * Format: Mongo Object ID
       * @description ID of the course version containing the module
       * @example 60d5ec49b3f1c8e4a8f8b8d5
       */
      versionId: string;
      /**
       * Module ID
       * Format: Mongo Object ID
       * @description ID of the module to move
       * @example 60d5ec49b3f1c8e4a8f8b8e6
       */
      moduleId: string;
    };
    DeleteModuleParams: {
      /**
       * Version ID
       * Format: Mongo Object ID
       * @description ID of the course version containing the module
       * @example 60d5ec49b3f1c8e4a8f8b8d5
       */
      versionId: string;
      /**
       * Module ID
       * Format: Mongo Object ID
       * @description ID of the module to delete
       * @example 60d5ec49b3f1c8e4a8f8b8e6
       */
      moduleId: string;
    };
    ModuleDataResponse: {
      /** @description The updated course version data containing modules */
      version: Record<string, never>;
    };
    ModuleNotFoundErrorResponse: {
      /**
       * @description The error message
       * @example No module found with the specified ID. Please verify the ID and try again.
       */
      message: string;
    };
    ModuleDeletedResponse: {
      /**
       * @description Deletion confirmation message
       * @example Module with the ID 60d5ec49b3f1c8e4a8f8b8e6 in Version 60d5ec49b3f1c8e4a8f8b8d5 has been deleted successfully.
       */
      message: string;
    };
    CreateSectionBody: {
      /**
       * Section Name
       * @description Name/title of the section
       * @example Introduction to Algorithms
       */
      name: string;
      /**
       * Section Description
       * @description Description or purpose of the section
       * @example This section covers fundamental algorithmic concepts including time complexity and space complexity.
       */
      description: string;
      /**
       * After Section ID
       * Format: Mongo Object ID
       * @description Optional: Place the new section after this section ID
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      afterSectionId?: string;
      /**
       * Before Section ID
       * Format: Mongo Object ID
       * @description Optional: Place the new section before this section ID
       * @example 60d5ec49b3f1c8e4a8f8b8c4
       */
      beforeSectionId?: string;
    };
    UpdateSectionBody: {
      /**
       * Section Name
       * @description Updated name of the section
       * @example Advanced Algorithms
       */
      name?: string;
      /**
       * Section Description
       * @description Updated description of the section
       * @example This section covers advanced algorithmic concepts including dynamic programming and greedy algorithms.
       */
      description?: string;
      /**
       * @deprecated
       * @description [READONLY] This is a virtual field used only for validation. Do not include this field in requests.
       * Either "name" or "description" must be provided.
       */
      nameOrDescription?: string;
    };
    MoveSectionBody: {
      /**
       * After Section ID
       * Format: Mongo Object ID
       * @description Move the section after this section ID
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      afterSectionId?: string;
      /**
       * Before Section ID
       * Format: Mongo Object ID
       * @description Move the section before this section ID
       * @example 60d5ec49b3f1c8e4a8f8b8c4
       */
      beforeSectionId?: string;
      /**
       * @deprecated
       * @description [READONLY] Validation helper. Either afterSectionId or beforeSectionId must be provided.
       */
      onlyOneAllowed?: string;
      /**
       * @deprecated
       * @description [READONLY] Validation helper. Both afterSectionId and beforeSectionId should not be provided together.
       */
      bothNotAllowed?: string;
    };
    CreateSectionParams: {
      /**
       * Version ID
       * Format: Mongo Object ID
       * @description ID of the course version to which the module belongs
       * @example 60d5ec49b3f1c8e4a8f8b8d5
       */
      versionId: string;
      /**
       * Module ID
       * Format: Mongo Object ID
       * @description ID of the module where the new section will be added
       * @example 60d5ec49b3f1c8e4a8f8b8e6
       */
      moduleId: string;
    };
    MoveSectionParams: {
      /**
       * Version ID
       * Format: Mongo Object ID
       * @description ID of the course version containing the module
       * @example 60d5ec49b3f1c8e4a8f8b8d5
       */
      versionId: string;
      /**
       * Module ID
       * Format: Mongo Object ID
       * @description ID of the module containing the section
       * @example 60d5ec49b3f1c8e4a8f8b8e6
       */
      moduleId: string;
      /**
       * Section ID
       * Format: Mongo Object ID
       * @description ID of the section to be moved
       * @example 60d5ec49b3f1c8e4a8f8b8f7
       */
      sectionId: string;
    };
    UpdateSectionParams: {
      /**
       * Version ID
       * Format: Mongo Object ID
       * @description ID of the course version containing the module
       * @example 60d5ec49b3f1c8e4a8f8b8d5
       */
      versionId: string;
      /**
       * Module ID
       * Format: Mongo Object ID
       * @description ID of the module containing the section
       * @example 60d5ec49b3f1c8e4a8f8b8e6
       */
      moduleId: string;
      /**
       * Section ID
       * Format: Mongo Object ID
       * @description ID of the section to be updated
       * @example 60d5ec49b3f1c8e4a8f8b8f7
       */
      sectionId: string;
    };
    SectionDataResponse: {
      /** @description The updated course version data containing the section */
      version: Record<string, never>;
    };
    SectionNotFoundErrorResponse: {
      /**
       * @description The error message
       * @example No section found with the specified ID. Please verify the ID and try again.
       */
      message: string;
    };
    VideoDetailsPayloadValidator: {
      /**
       * Video URL
       * Format: uri
       * @description Public video URL (e.g., YouTube or Vimeo link)
       * @example https://www.youtube.com/watch?v=dQw4w9WgXcQ
       */
      URL: string;
      /**
       * Start Time
       * @description Start time of the video clip in HH:MM:SS format
       * @example 00:01:30
       */
      startTime: string;
      /**
       * End Time
       * @description End time of the video clip in HH:MM:SS format
       * @example 00:10:15
       */
      endTime: string;
      /**
       * Video Points
       * @description Points assigned to the video interaction
       * @example 10
       */
      points: number;
    };
    QuizDetailsPayloadValidator: {
      /**
       * Question Visibility
       * @description Number of quiz questions visible to students at once
       * @example 5
       */
      questionVisibility: number;
      /**
       * Quiz Release Time
       * Format: date-time
       * @description ISO date string representing quiz release time
       * @example 2023-10-15T14:00:00Z
       */
      releaseTime: string;
      /**
       * Quiz Questions
       * @description List of quiz question IDs (auto-managed)
       * @example [
       *   "60d5ec49b3f1c8e4a8f8b8c1",
       *   "60d5ec49b3f1c8e4a8f8b8c2"
       * ]
       */
      questions?: readonly string[];
      /**
       * Quiz Deadline
       * Format: date-time
       * @description ISO date string for quiz deadline
       * @example 2023-10-22T23:59:59Z
       */
      deadline: string;
    };
    BlogDetailsPayloadValidator: {
      /**
       * Blog Tags
       * @description Tags for categorizing the blog (auto-managed)
       * @example [
       *   "programming",
       *   "algorithms"
       * ]
       */
      tags?: readonly string[];
      /**
       * Blog Content
       * @description Full blog content in markdown or plain text
       * @example # Introduction
       *
       * This is a sample blog post about programming...
       */
      content: string;
      /**
       * Blog Points
       * @description Points assigned to the blog submission
       * @example 20
       */
      points: number;
      /**
       * Estimated Read Time
       * @description Estimated time to complete reading the blog in minutes
       * @example 15
       */
      estimatedReadTimeInMinutes: number;
    };
    CreateItemBody: {
      /**
       * Item ID
       * Format: Mongo Object ID
       * @description MongoDB ID (auto-assigned)
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      _id?: string;
      /**
       * Item Name
       * @description Title of the item
       * @example Introduction to Data Structures
       */
      name: string;
      /**
       * Item Description
       * @description Description of the item
       * @example Learn about basic data structures like arrays, linked lists, and stacks.
       */
      description: string;
      /**
       * Section ID
       * Format: Mongo Object ID
       * @description Section ID to which the item belongs (auto-managed)
       * @example 60d5ec49b3f1c8e4a8f8b8d2
       */
      sectionId?: string;
      /**
       * Item Order
       * @description Order key for item placement (auto-managed)
       * @example a1b2c3
       */
      order?: string;
      /**
       * Item Details
       * @description Item details (depends on type) – video, blog, or quiz
       */
      itemDetails?: unknown;
      /**
       * After Item ID
       * Format: Mongo Object ID
       * @description Place item after this item ID
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      afterItemId?: string;
      /**
       * Before Item ID
       * Format: Mongo Object ID
       * @description Place item before this item ID
       * @example 60d5ec49b3f1c8e4a8f8b8c4
       */
      beforeItemId?: string;
      /**
       * Created At
       * Format: date-time
       * @description Item creation timestamp (auto-managed)
       * @example 2023-10-01T12:00:00Z
       */
      createdAt?: string;
      /**
       * Updated At
       * Format: date-time
       * @description Item update timestamp (auto-managed)
       * @example 2023-10-05T15:30:00Z
       */
      updatedAt?: string;
      /**
       * Item Type
       * @description Type of the item: VIDEO, BLOG, or QUIZ
       * @example VIDEO
       * @enum {string}
       */
      type: "VIDEO" | "QUIZ" | "BLOG";
      /**
       * Video Details
       * @description Details specific to video items
       */
      videoDetails?: components["schemas"]["VideoDetailsPayloadValidator"];
      /**
       * Blog Details
       * @description Details specific to blog items
       */
      blogDetails?: components["schemas"]["BlogDetailsPayloadValidator"];
      /**
       * Quiz Details
       * @description Details specific to quiz items
       */
      quizDetails?: components["schemas"]["QuizDetailsPayloadValidator"];
    };
    UpdateItemBody: {
      /**
       * Item ID
       * Format: Mongo Object ID
       * @description MongoDB ID (auto-assigned)
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      _id?: string;
      /**
       * Item Name
       * @description Updated title of the item
       * @example Advanced Data Structures
       */
      name?: string;
      /**
       * Item Description
       * @description Updated description of the item
       * @example Learn about advanced data structures like trees, graphs, and hash tables.
       */
      description?: string;
      /**
       * Section ID
       * Format: Mongo Object ID
       * @description Section ID to which the item belongs (auto-managed)
       * @example 60d5ec49b3f1c8e4a8f8b8d2
       */
      sectionId?: string;
      /**
       * Item Order
       * @description Order key for item placement (auto-managed)
       * @example a1b2c3
       */
      order?: string;
      /**
       * Item Details
       * @description Item details (depends on type) – video, blog, or quiz
       */
      itemDetails?: unknown;
      /**
       * Created At
       * Format: date-time
       * @description Item creation timestamp (auto-managed)
       * @example 2023-10-01T12:00:00Z
       */
      createdAt?: string;
      /**
       * Updated At
       * Format: date-time
       * @description Item update timestamp (auto-managed)
       * @example 2023-10-05T15:30:00Z
       */
      updatedAt?: string;
      /**
       * Item Type
       * @description Updated type of the item: VIDEO, BLOG, or QUIZ
       * @example BLOG
       * @enum {string}
       */
      type?: "VIDEO" | "QUIZ" | "BLOG";
      /**
       * After Item ID
       * Format: Mongo Object ID
       * @description Place item after this item ID
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      afterItemId?: string;
      /**
       * Before Item ID
       * Format: Mongo Object ID
       * @description Place item before this item ID
       * @example 60d5ec49b3f1c8e4a8f8b8c4
       */
      beforeItemId?: string;
      /**
       * Video Details
       * @description Updated details specific to video items
       */
      videoDetails?: components["schemas"]["VideoDetailsPayloadValidator"];
      /**
       * Blog Details
       * @description Updated details specific to blog items
       */
      blogDetails?: components["schemas"]["BlogDetailsPayloadValidator"];
      /**
       * Quiz Details
       * @description Updated details specific to quiz items
       */
      quizDetails?: components["schemas"]["QuizDetailsPayloadValidator"];
    };
    MoveItemBody: {
      /**
       * After Item ID
       * Format: Mongo Object ID
       * @description Move the item after this item ID
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      afterItemId?: string;
      /**
       * Before Item ID
       * Format: Mongo Object ID
       * @description Move the item before this item ID
       * @example 60d5ec49b3f1c8e4a8f8b8c4
       */
      beforeItemId?: string;
      /**
       * @deprecated
       * @description [READONLY] Validation helper. Either afterItemId or beforeItemId must be provided.
       */
      onlyOneAllowed?: string;
      /**
       * @deprecated
       * @description [READONLY] Validation helper. Both afterItemId and beforeItemId should not be provided together.
       */
      bothNotAllowed?: string;
    };
    CreateItemParams: {
      /**
       * Version ID
       * Format: Mongo Object ID
       * @description ID of the course version
       * @example 60d5ec49b3f1c8e4a8f8b8d5
       */
      versionId: string;
      /**
       * Module ID
       * Format: Mongo Object ID
       * @description ID of the module inside the version
       * @example 60d5ec49b3f1c8e4a8f8b8e6
       */
      moduleId: string;
      /**
       * Section ID
       * Format: Mongo Object ID
       * @description ID of the section inside the module
       * @example 60d5ec49b3f1c8e4a8f8b8f7
       */
      sectionId: string;
    };
    ReadAllItemsParams: {
      /**
       * Version ID
       * Format: Mongo Object ID
       * @description ID of the course version containing the items
       * @example 60d5ec49b3f1c8e4a8f8b8d5
       */
      versionId: string;
      /**
       * Module ID
       * Format: Mongo Object ID
       * @description ID of the module containing the section
       * @example 60d5ec49b3f1c8e4a8f8b8e6
       */
      moduleId: string;
      /**
       * Section ID
       * Format: Mongo Object ID
       * @description ID of the section containing the items
       * @example 60d5ec49b3f1c8e4a8f8b8f7
       */
      sectionId: string;
    };
    UpdateItemParams: {
      /**
       * Version ID
       * Format: Mongo Object ID
       * @description ID of the course version containing the item
       * @example 60d5ec49b3f1c8e4a8f8b8d5
       */
      versionId: string;
      /**
       * Module ID
       * Format: Mongo Object ID
       * @description ID of the module containing the section
       * @example 60d5ec49b3f1c8e4a8f8b8e6
       */
      moduleId: string;
      /**
       * Section ID
       * Format: Mongo Object ID
       * @description ID of the section containing the item
       * @example 60d5ec49b3f1c8e4a8f8b8f7
       */
      sectionId: string;
      /**
       * Item ID
       * Format: Mongo Object ID
       * @description ID of the item to be updated
       * @example 60d5ec49b3f1c8e4a8f8b8f8
       */
      itemId: string;
    };
    MoveItemParams: {
      /**
       * Version ID
       * Format: Mongo Object ID
       * @description ID of the course version containing the item
       * @example 60d5ec49b3f1c8e4a8f8b8d5
       */
      versionId: string;
      /**
       * Module ID
       * Format: Mongo Object ID
       * @description ID of the module containing the section
       * @example 60d5ec49b3f1c8e4a8f8b8e6
       */
      moduleId: string;
      /**
       * Section ID
       * Format: Mongo Object ID
       * @description ID of the section containing the item
       * @example 60d5ec49b3f1c8e4a8f8b8f7
       */
      sectionId: string;
      /**
       * Item ID
       * Format: Mongo Object ID
       * @description ID of the item to be moved
       * @example 60d5ec49b3f1c8e4a8f8b8f8
       */
      itemId: string;
    };
    DeleteItemParams: {
      /**
       * Items Group ID
       * Format: Mongo Object ID
       * @description ID of the items group containing the item
       * @example 60d5ec49b3f1c8e4a8f8b8g9
       */
      itemsGroupId: string;
      /**
       * Item ID
       * Format: Mongo Object ID
       * @description ID of the item to delete
       * @example 60d5ec49b3f1c8e4a8f8b8f8
       */
      itemId: string;
    };
    ItemNotFoundErrorResponse: {
      /**
       * @description The error message
       * @example No item found with the specified ID. Please verify the ID and try again.
       */
      message: string;
    };
    ItemDataResponse: {
      /** @description The item data */
      itemsGroup: Record<string, never>;
      /** @description The updated version data (when applicable) */
      version?: Record<string, never>;
    };
    DeletedItemResponse: {
      /** @description The deleted item data */
      deletedItem: Record<string, never>;
      /** @description The updated items group after deletion */
      updatedItemsGroup: Record<string, never>;
    };
    GetUserProgressParams: {
      /**
       * Format: Mongo Object ID
       * @description User ID to retrieve progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      userId: string;
      /**
       * Format: Mongo Object ID
       * @description Course ID to retrieve progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c2
       */
      courseId: string;
      /**
       * Format: Mongo Object ID
       * @description Course version ID to retrieve progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      courseVersionId: string;
    };
    StartItemBody: {
      /**
       * Format: Mongo Object ID
       * @description ID of the course item to start
       * @example 60d5ec49b3f1c8e4a8f8b8c4
       */
      itemId: string;
      /**
       * Format: Mongo Object ID
       * @description ID of the module containing the item
       * @example 60d5ec49b3f1c8e4a8f8b8c5
       */
      moduleId: string;
      /**
       * Format: Mongo Object ID
       * @description ID of the section containing the item
       * @example 60d5ec49b3f1c8e4a8f8b8c6
       */
      sectionId: string;
    };
    StartItemParams: {
      /**
       * Format: Mongo Object ID
       * @description User ID to track progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      userId: string;
      /**
       * Format: Mongo Object ID
       * @description Course ID to track progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c2
       */
      courseId: string;
      /**
       * Format: Mongo Object ID
       * @description Course version ID to track progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      courseVersionId: string;
    };
    StartItemResponse: {
      /**
       * Format: Mongo Object ID
       * @description Watch item ID for tracking progress
       * @example 60d5ec49b3f1c8e4a8f8b8c7
       */
      watchItemId: string;
    };
    StopItemParams: {
      /**
       * Format: Mongo Object ID
       * @description User ID to stop tracking progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      userId: string;
      /**
       * Format: Mongo Object ID
       * @description Course ID to stop tracking progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c2
       */
      courseId: string;
      /**
       * Format: Mongo Object ID
       * @description Course version ID to stop tracking progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      courseVersionId: string;
    };
    StopItemBody: {
      /**
       * Format: Mongo Object ID
       * @description Watch item ID used for tracking progress
       * @example 60d5ec49b3f1c8e4a8f8b8c7
       */
      watchItemId: string;
      /**
       * Format: Mongo Object ID
       * @description ID of the course item to stop tracking
       * @example 60d5ec49b3f1c8e4a8f8b8c4
       */
      itemId: string;
      /**
       * Format: Mongo Object ID
       * @description ID of the section containing the item
       * @example 60d5ec49b3f1c8e4a8f8b8c6
       */
      sectionId: string;
      /**
       * Format: Mongo Object ID
       * @description ID of the module containing the item
       * @example 60d5ec49b3f1c8e4a8f8b8c5
       */
      moduleId: string;
    };
    UpdateProgressBody: {
      /**
       * Format: Mongo Object ID
       * @description ID of the module to update progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c5
       */
      moduleId: string;
      /**
       * Format: Mongo Object ID
       * @description ID of the section to update progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c6
       */
      sectionId: string;
      /**
       * Format: Mongo Object ID
       * @description ID of the item to update progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c4
       */
      itemId: string;
      /**
       * Format: Mongo Object ID
       * @description Watch item ID used for tracking progress
       * @example 60d5ec49b3f1c8e4a8f8b8c7
       */
      watchItemId: string;
    };
    UpdateProgressParams: {
      /**
       * Format: Mongo Object ID
       * @description User ID to update progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      userId: string;
      /**
       * Format: Mongo Object ID
       * @description Course ID to update progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c2
       */
      courseId: string;
      /**
       * Format: Mongo Object ID
       * @description Course version ID to update progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      courseVersionId: string;
    };
    ResetCourseProgressParams: {
      /**
       * Format: Mongo Object ID
       * @description User ID to reset progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      userId: string;
      /**
       * Format: Mongo Object ID
       * @description Course ID to reset progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c2
       */
      courseId: string;
      /**
       * Format: Mongo Object ID
       * @description Course version ID to reset progress for
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      courseVersionId: string;
    };
    ResetCourseProgressBody: {
      /**
       * Format: Mongo Object ID
       * @description Optional module ID to reset progress to
       * @example 60d5ec49b3f1c8e4a8f8b8c5
       */
      moduleId?: string | null;
      /**
       * Format: Mongo Object ID
       * @description Optional section ID to reset progress to
       * @example 60d5ec49b3f1c8e4a8f8b8c6
       */
      sectionId?: string | null;
      /**
       * Format: Mongo Object ID
       * @description Optional item ID to reset progress to
       * @example 60d5ec49b3f1c8e4a8f8b8c4
       */
      itemId?: string | null;
      invalidFieldsCheck?: unknown;
      invalidFieldsCheck2?: unknown;
    };
    ProgressDataResponse: {
      /**
       * Format: Mongo Object ID
       * @description Unique identifier for the progress record
       * @example 60d5ec49b3f1c8e4a8f8b8d1
       */
      _id: string;
      /**
       * Format: Mongo Object ID
       * @description User ID associated with this progress
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      userId: string;
      /**
       * Format: Mongo Object ID
       * @description Course ID associated with this progress
       * @example 60d5ec49b3f1c8e4a8f8b8c2
       */
      courseId: string;
      /**
       * Format: Mongo Object ID
       * @description Course version ID associated with this progress
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      courseVersionId: string;
      /**
       * Format: Mongo Object ID
       * @description ID of the current module in progress
       * @example 60d5ec49b3f1c8e4a8f8b8c5
       */
      currentModule: string;
      /**
       * Format: Mongo Object ID
       * @description ID of the current section in progress
       * @example 60d5ec49b3f1c8e4a8f8b8c6
       */
      currentSection: string;
      /**
       * Format: Mongo Object ID
       * @description ID of the current item in progress
       * @example 60d5ec49b3f1c8e4a8f8b8c4
       */
      currentItem: string;
      /**
       * @description Whether the course has been completed
       * @example false
       */
      completed: boolean;
    };
    EnrollmentParams: {
      /**
       * Format: Mongo Object ID
       * @description User ID of the student to enroll
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      userId: string;
      /**
       * Format: Mongo Object ID
       * @description ID of the course to enroll in
       * @example 60d5ec49b3f1c8e4a8f8b8c2
       */
      courseId: string;
      /**
       * Format: Mongo Object ID
       * @description ID of the specific course version to enroll in
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      courseVersionId: string;
    };
    EnrollmentDataResponse: {
      /**
       * Format: Mongo Object ID
       * @description Unique identifier for the enrollment record
       * @example 60d5ec49b3f1c8e4a8f8b8d2
       */
      _id: string;
      /**
       * Format: Mongo Object ID
       * @description User ID associated with this enrollment
       * @example 60d5ec49b3f1c8e4a8f8b8c1
       */
      userId: string;
      /**
       * Format: Mongo Object ID
       * @description Course ID associated with this enrollment
       * @example 60d5ec49b3f1c8e4a8f8b8c2
       */
      courseId: string;
      /**
       * Format: Mongo Object ID
       * @description Course version ID associated with this enrollment
       * @example 60d5ec49b3f1c8e4a8f8b8c3
       */
      courseVersionId: string;
      /**
       * @description Status of the enrollment
       * @example active
       * @enum {string}
       */
      status: "active" | "inactive";
      /**
       * Format: date-time
       * @description Date when the user was enrolled
       * @example 2023-10-01T12:00:00Z
       */
      enrollmentDate: string;
    };
    EnrollUserResponseData: {
      /** @description Enrollment data for the user */
      enrollment: Record<string, never>;
      /** @description Progress data for the user */
      progress: Record<string, never>;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Register User
   * @description Creates a new user account with the provided credentials.
   */
  "AuthController.signup": {
    /** @description SignUpBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SignUpBody"];
      };
    };
    responses: {
      /** @description User successfully registered */
      201: {
        content: {
          "application/json": components["schemas"]["SignUpResponse"];
        };
      };
      /** @description Invalid input data */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Registration failed */
      500: {
        content: {
          "application/json": components["schemas"]["AuthErrorResponse"];
        };
      };
    };
  };
  /**
   * Change Password
   * @description Changes the authenticated user's password to the new password provided.
   */
  "AuthController.changePassword": {
    /** @description ChangePasswordBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ChangePasswordBody"];
      };
    };
    responses: {
      /** @description Password changed successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ChangePasswordResponse"];
        };
      };
      /** @description Invalid password format or mismatch */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Password change failed */
      500: {
        content: {
          "application/json": components["schemas"]["AuthErrorResponse"];
        };
      };
    };
  };
  /**
   * Verify Token
   * @description Verifies if the user's authentication token is valid and belongs to an admin user.
   */
  "AuthController.verifyToken": {
    responses: {
      /** @description Token verification successful */
      200: {
        content: {
          "application/json": components["schemas"]["TokenVerificationResponse"];
        };
      };
      /** @description Invalid or expired token */
      401: {
        content: {
          "application/json": components["schemas"]["AuthErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Course
   * @description Creates a new course with the provided details.
   */
  "CourseController.create": {
    /** @description CreateCourseBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateCourseBody"];
      };
    };
    responses: {
      /** @description Course created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["CourseDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Course
   * @description Retrieves the course details for the specified course ID.
   */
  "CourseController.read": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Course retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["CourseDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Course not found */
      404: {
        content: {
          "application/json": components["schemas"]["CourseNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Course
   * @description Updates the course details for the specified course ID.
   */
  "CourseController.update": {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description UpdateCourseBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateCourseBody"];
      };
    };
    responses: {
      /** @description Course updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["CourseDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Course not found */
      404: {
        content: {
          "application/json": components["schemas"]["CourseNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Course Version
   * @description Creates a new version for a specific course.
   */
  "CourseVersionController.create": {
    parameters: {
      path: {
        id: string;
      };
    };
    /** @description CreateCourseVersionBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateCourseVersionBody"];
      };
    };
    responses: {
      /** @description Course version created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["CreateCourseVersionResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Course not found */
      404: {
        content: {
          "application/json": components["schemas"]["CourseVersionNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Get Course Version
   * @description Retrieves a course version by its ID.
   */
  "CourseVersionController.read": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Course version retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["CourseVersionDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Course version not found */
      404: {
        content: {
          "application/json": components["schemas"]["CourseVersionNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Course Version
   * @description Deletes a course version by its ID.
   */
  "CourseVersionController.delete": {
    parameters: {
      path: {
        versionId: string;
        courseId: string;
      };
    };
    responses: {
      /** @description Course version deleted successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteCourseVersionParams"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Course or version not found */
      404: {
        content: {
          "application/json": components["schemas"]["CourseVersionNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Module
   * @description Creates a new module in the specified course version with the provided details.
   */
  "ModuleController.create": {
    parameters: {
      path: {
        versionId: string;
      };
    };
    /** @description CreateModuleBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateModuleBody"];
      };
    };
    responses: {
      /** @description Module created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["ModuleDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Module not found */
      404: {
        content: {
          "application/json": components["schemas"]["ModuleNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Module
   * @description Updates an existing module's name or description within a course version.
   */
  "ModuleController.update": {
    parameters: {
      path: {
        versionId: string;
        moduleId: string;
      };
    };
    /** @description UpdateModuleBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateModuleBody"];
      };
    };
    responses: {
      /** @description Module updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ModuleDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Module not found */
      404: {
        content: {
          "application/json": components["schemas"]["ModuleNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Module
   * @description Permanently removes a module from a course version.
   */
  "ModuleController.delete": {
    parameters: {
      path: {
        versionId: string;
        moduleId: string;
      };
    };
    responses: {
      /** @description Module deleted successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ModuleDeletedResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Module not found */
      404: {
        content: {
          "application/json": components["schemas"]["ModuleNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Move Module
   * @description Reorders a module within its course version by placing it before or after another module.
   */
  "ModuleController.move": {
    parameters: {
      path: {
        versionId: string;
        moduleId: string;
      };
    };
    /** @description MoveModuleBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["MoveModuleBody"];
      };
    };
    responses: {
      /** @description Module moved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ModuleDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Module not found */
      404: {
        content: {
          "application/json": components["schemas"]["ModuleNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Section
   * @description Creates a new section in the specified module and automatically generates an associated items group.
   */
  "SectionController.create": {
    parameters: {
      path: {
        versionId: string;
        moduleId: string;
      };
    };
    /** @description CreateSectionBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateSectionBody"];
      };
    };
    responses: {
      /** @description Section created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["SectionDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Section not found */
      404: {
        content: {
          "application/json": components["schemas"]["SectionNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Section
   * @description Updates an existing section's name or description within a module.
   */
  "SectionController.update": {
    parameters: {
      path: {
        versionId: string;
        moduleId: string;
        sectionId: string;
      };
    };
    /** @description UpdateSectionBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateSectionBody"];
      };
    };
    responses: {
      /** @description Section updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["SectionDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Section not found */
      404: {
        content: {
          "application/json": components["schemas"]["SectionNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Move Section
   * @description Reorders a section within its module by placing it before or after another section.
   */
  "SectionController.move": {
    parameters: {
      path: {
        versionId: string;
        moduleId: string;
        sectionId: string;
      };
    };
    /** @description MoveSectionBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["MoveSectionBody"];
      };
    };
    responses: {
      /** @description Section moved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["SectionDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Section not found */
      404: {
        content: {
          "application/json": components["schemas"]["SectionNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Get All Items
   * @description Retrieves all items from the specified section of a module in a course version.
   */
  "ItemController.readAll": {
    parameters: {
      path: {
        versionId: string;
        moduleId: string;
        sectionId: string;
      };
    };
    responses: {
      /** @description Items retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ItemDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Item not found */
      404: {
        content: {
          "application/json": components["schemas"]["ItemNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Create Item
   * @description Creates a new item in the specified section with the provided details.
   */
  "ItemController.create": {
    parameters: {
      path: {
        versionId: string;
        moduleId: string;
        sectionId: string;
      };
    };
    /** @description CreateItemBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateItemBody"];
      };
    };
    responses: {
      /** @description Item created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["ItemDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Item not found */
      404: {
        content: {
          "application/json": components["schemas"]["ItemNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Item
   * @description Updates an existing item in the specified section with the provided details.
   */
  "ItemController.update": {
    parameters: {
      path: {
        versionId: string;
        moduleId: string;
        sectionId: string;
        itemId: string;
      };
    };
    /** @description UpdateItemBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateItemBody"];
      };
    };
    responses: {
      /** @description Item updated successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ItemDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Item not found */
      404: {
        content: {
          "application/json": components["schemas"]["ItemNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Delete Item
   * @description Deletes an item from a course section permanently.
   */
  "ItemController.delete": {
    parameters: {
      path: {
        itemsGroupId: string;
        itemId: string;
      };
    };
    responses: {
      /** @description Item deleted successfully */
      200: {
        content: {
          "application/json": components["schemas"]["DeletedItemResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Item not found */
      404: {
        content: {
          "application/json": components["schemas"]["ItemNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Move Item
   * @description Moves an item to a new position within its section by recalculating its order.
   */
  "ItemController.move": {
    parameters: {
      path: {
        versionId: string;
        moduleId: string;
        sectionId: string;
        itemId: string;
      };
    };
    /** @description MoveItemBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["MoveItemBody"];
      };
    };
    responses: {
      /** @description Item moved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ItemDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
      /** @description Item not found */
      404: {
        content: {
          "application/json": components["schemas"]["ItemNotFoundErrorResponse"];
        };
      };
    };
  };
  /**
   * Enroll User in Course
   * @description Enrolls a user in a specific course version and initializes their progress.
   */
  "EnrollmentController.enrollUser": {
    parameters: {
      path: {
        userId: string;
        courseId: string;
        courseVersionId: string;
      };
    };
    responses: {
      /** @description User enrolled successfully */
      200: {
        content: {
          "application/json": components["schemas"]["EnrollUserResponseData"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
    };
  };
  /**
   * Get User Progress
   * @description Retrieves a user's progress for a specific course version.
   */
  "ProgressController.getUserProgress": {
    parameters: {
      path: {
        userId: string;
        courseId: string;
        courseVersionId: string;
      };
    };
    responses: {
      /** @description User progress retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["ProgressDataResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
    };
  };
  /**
   * Start Course Item
   * @description Starts tracking a user's progress on a specific course item.
   */
  "ProgressController.startItem": {
    parameters: {
      path: {
        userId: string;
        courseId: string;
        courseVersionId: string;
      };
    };
    /** @description StartItemBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StartItemBody"];
      };
    };
    responses: {
      /** @description Course item started successfully */
      200: {
        content: {
          "application/json": components["schemas"]["StartItemResponse"];
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
    };
  };
  /**
   * Stop Course Item
   * @description Stops tracking a user's progress on a specific course item.
   */
  "ProgressController.stopItem": {
    parameters: {
      path: {
        userId: string;
        courseId: string;
        courseVersionId: string;
      };
    };
    /** @description StopItemBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StopItemBody"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
    };
  };
  /**
   * Update Progress
   * @description Updates a user's progress for a specific course item.
   */
  "ProgressController.updateProgress": {
    parameters: {
      path: {
        userId: string;
        courseId: string;
        courseVersionId: string;
      };
    };
    /** @description UpdateProgressBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateProgressBody"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
    };
  };
  /**
   * Reset Course Progress
   * @description Resets a user's progress for a course, module, section, or item.
   */
  "ProgressController.resetProgress": {
    parameters: {
      path: {
        userId: string;
        courseId: string;
        courseVersionId: string;
      };
    };
    /** @description ResetCourseProgressBody */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ResetCourseProgressBody"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Bad Request Error */
      400: {
        content: {
          "application/json": components["schemas"]["BadRequestErrorResponse"];
        };
      };
    };
  };
}
